// 3.Merge Two Sorted List (3/169)

//Recursive Solution
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL)
            return list2;
        if(list2 == NULL)
            return list1;
        if(list1->val <= list2->val){
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        }
        else
            list2->next = mergeTwoLists(list2->next, list1);
        return list2;
    }
};

//Iterative Solution
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) // If One is Null then the other is the answer.
            return l2;
        if(l2 == NULL)
            return l1;
        ListNode *dummy = NULL; // Initiate a head to return.
        if(l1->val < l2->val){
            dummy = l1;
            l1=l1->next;
        }
        else{
            dummy = l2;
            l2=l2->next;
        }
        ListNode *curr = dummy;
        while(l1 && l2){ // Merge until one of the list is empty.
            if(l1->val < l2->val){
                curr->next = l1;
                l1 = l1->next;
            }
            else{
                curr->next = l2;
                l2 = l2->next;
            }
            curr = curr->next;
        }
        if(!l1) // Add the non empty list.
            curr->next = l2;
        else
            curr->next = l1;
        return dummy; // return head.
    }
};
